services:
  # Next.js application (runs on port 3006, internal only)
  nextjs-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rift-frontend
    restart: unless-stopped

    # Use host networking to access services on host (OTC server, etc.)
    network_mode: "host"

    environment:
      # Node environment
      - NODE_ENV=production
      - PORT=3006
      - HOSTNAME=0.0.0.0

      # Add your environment variables here
      # QuickNode URLs
      - QUICKNODE_ETHEREUM_URL=${QUICKNODE_ETHEREUM_URL}
      - QUICKNODE_BASE_URL=${QUICKNODE_BASE_URL}

      # Public environment variables (available to browser)
      - NEXT_PUBLIC_OTC_SERVER_URL=${NEXT_PUBLIC_OTC_SERVER_URL:-http://localhost:8080}
      - NEXT_PUBLIC_IS_FRONTEND_PAUSED=${NEXT_PUBLIC_IS_FRONTEND_PAUSED:-false}

      # Add any other env vars your app needs
      # - NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=${NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID}
      # - ANALYTICS_API_URL=${ANALYTICS_API_URL}

    # Health check
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3006/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Caddy reverse proxy with CORS (public on port 3000)
  caddy:
    image: caddy:2-alpine
    container_name: rift-caddy
    restart: unless-stopped
    network_mode: "host"
    environment:
      - HTTP_PORT=3005
    depends_on:
      - nextjs-app
    command: |
      caddy run --config /etc/caddy/Caddyfile --adapter caddyfile
    configs:
      - source: caddyfile
        target: /etc/caddy/Caddyfile

configs:
  caddyfile:
    content: |
      {
        auto_https off
        admin off
      }

      :3005 {
        # Log all requests
        log {
          output stdout
          format console
          level DEBUG
        }

        # CORS headers
        header {
          Access-Control-Allow-Origin "*"
          Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH"
          Access-Control-Allow-Headers "*"
          Access-Control-Allow-Credentials "true"
          Access-Control-Max-Age "86400"
        }

        # Handle OPTIONS preflight
        @options {
          method OPTIONS
        }
        respond @options 204

        # Rewrite root requests to /api/uniswap-router
        # This allows frontend to call https://uniswap-quote-backend.riftnodes.com/?params
        # and have it route to /api/uniswap-router?params
        rewrite * /api/uniswap-router{uri}

        # Reverse proxy to Next.js
        reverse_proxy localhost:3006 {
          header_up Host {host}
          header_up X-Real-IP {remote_host}
          header_up X-Forwarded-For {remote_host}
          header_up X-Forwarded-Proto {scheme}
        }
      }
